using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SimplePaint
{
    public partial class FormPrincipal : Form
    {
        private bool flagPintar = false; // Para controlar quando se deve pintar
        private Graphics graphicsPainelPintura;
        private float espessuraCaneta;

        public FormPrincipal()
        {
            InitializeComponent();

            // As propriedades abaixo só fazem efeito quando o botão está com a propriedade FlatStyle
            // setada em Flat
            buttonBorracha.FlatAppearance.MouseOverBackColor = Color.DarkSlateGray; // altera a cor do botão quando o cursor está sobre ele
            buttonLimpar.FlatAppearance.MouseOverBackColor = Color.DarkSlateGray; // altera a cor do botão quando o cursor está sobre ele
            buttonSalvar.FlatAppearance.MouseOverBackColor = Color.DarkSlateGray; // altera a cor do botão quando o cursor está sobre ele

            for (int i=2; i <= 100; i+=2) // Irá preencher a comboBox de 2 até 100 contando de 2 em 2
            {
                comboBoxEspessuraDaCaneta.Items.Add(i);
            }
            comboBoxEspessuraDaCaneta.Text = "10"; // Texto que irá aparecer inicialmente na comboBox
            comboBoxEspessuraDaCaneta.IntegralHeight = false; // Necesário para que seja possível definir a quantidade de itens a serem exibidos na combobox
            comboBoxEspessuraDaCaneta.MaxDropDownItems = 5; // Define o número de itens a serem exibidos na combobox

            graphicsPainelPintura = panelPintura.CreateGraphics(); // O graphics permite o desenho sobre o controle
            espessuraCaneta = float.Parse(comboBoxEspessuraDaCaneta.Text); // Converte o texto da comboBox espessura para tipo float
        }

        // Handler do evento de click do botão
        // Serve para manipularmos o que acontece quando o clique ocorre
        private void buttonCorCaneta_Click(object sender, EventArgs e)
        {
            var colorDialog = new ColorDialog(); // ColorDialog é uma caixa de seleção de cores
            var corEscolhida = colorDialog.ShowDialog(); // Exibe na forma modal - aplicação fica travada enquanto o diálogo não é resolvido
            if(corEscolhida == DialogResult.OK) // Veriica se usuário clicou mesmo em OK
            {
                buttonCorCaneta.BackColor = colorDialog.Color; // Alteramos a cor do botão para a cor escolhida pelo usuário
            }
        }

        private void panelPintura_MouseDown(object sender, MouseEventArgs e)
        {
            flagPintar = true; // Quando usuário pressiona o botão do mouse sob o painel entendemos que ele quer pintar
        }

        private void panelPintura_MouseUp(object sender, MouseEventArgs e)
        {
            flagPintar = false; // Quando usuário solta o botão do mouse entendemos que ele não quer pintar
        }

        private void panelPintura_MouseMove(object sender, MouseEventArgs e)
        {
            if(flagPintar) // Só pintamos se o botão do mouse estiver pressionado! Como sabemos isso? Através da flag Pintar
            {
                // Desenhamos uma elipse de cor e espessura definida pelo usuário, nas coordenadas do ponteiro do mouse
                graphicsPainelPintura
                    .DrawEllipse(new Pen(buttonCorCaneta.BackColor, espessuraCaneta), new RectangleF(e.X, e.Y, espessuraCaneta, espessuraCaneta));
            }
        }

        private void buttonLimpar_Click(object sender, EventArgs e)
        {
            // A MessageBox representa uma janela para exibição de mensagens ao usuário
            if(MessageBox.Show("Tem certeza disso? Todo o desenho será apagado!", "Apagar desenho", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning) == DialogResult.OK)
            {
                graphicsPainelPintura.Clear(Color.White); // Limpa todo o desenho e preenche novamente o fundo do painel de branco
            }
        }

        // SelectedIndexChanged ocorre quando é feita uma escolha de item pelo usuário na comboBox
        //
        private void comboBoxEspessuraDaCaneta_SelectedIndexChanged(object sender, EventArgs e)
        {
            espessuraCaneta = float.Parse(comboBoxEspessuraDaCaneta.SelectedItem.ToString());
        }
    }
}
